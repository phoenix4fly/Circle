'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { apiClient, tokenUtils } from '@/lib/api';
import type { TravelStyle, TravelLocation, TripDuration } from '@/lib/api';

export default function PreferencesPage() {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState('');

  // –î–∞–Ω–Ω—ã–µ –∏–∑ API
  const [travelStyles, setTravelStyles] = useState<TravelStyle[]>([]);
  const [travelLocations, setTravelLocations] = useState<TravelLocation[]>([]);
  const [tripDurations, setTripDurations] = useState<TripDuration[]>([]);

  // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  const [selectedStyles, setSelectedStyles] = useState<number[]>([]);
  const [selectedLocations, setSelectedLocations] = useState<number[]>([]);
  const [selectedDurations, setSelectedDurations] = useState<number[]>([]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const initializePage = async () => {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (!tokenUtils.isAuthenticated()) {
          router.push('/auth');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const profile = await apiClient.getMe();
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª —Å—Ñ–µ—Ä—É - —Ä–µ–¥–∏—Ä–µ–∫—Ç
        if (!profile.sphere_selected) {
          router.push('/onboarding/sphere');
          return;
        }

        // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª onboarding - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if (profile.onboarding_completed) {
          router.push('/');
          return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
        const [styles, locations, durations] = await Promise.all([
          apiClient.getTravelStyles(),
          apiClient.getTravelLocations(),
          apiClient.getTripDurations()
        ]);

        setTravelStyles(styles);
        setTravelLocations(locations);
        setTripDurations(durations);

        setLoading(false);
      } catch (err: any) {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        console.error('Error:', err);
        setLoading(false);
      }
    };

    initializePage();
  }, [router]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞
  const toggleStyle = (id: number) => {
    setSelectedStyles(prev => 
      prev.includes(id) 
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  const toggleLocation = (id: number) => {
    setSelectedLocations(prev => 
      prev.includes(id) 
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  const toggleDuration = (id: number) => {
    setSelectedDurations(prev => 
      prev.includes(id) 
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
  const getIcon = (iconKey: string) => {
    const iconMap: { [key: string]: string } = {
      // –°—Ç–∏–ª–∏ –æ—Ç–¥—ã—Ö–∞
      'active': 'üèÉ‚Äç‚ôÇÔ∏è',
      'relaxed': 'üßò‚Äç‚ôÄÔ∏è',
      'balanced': '‚öñÔ∏è',
      'spontaneous': 'üé≤',
      'mindful': 'üå±',
      'social': 'üë•',
      'solitary': 'üö∂‚Äç‚ôÇÔ∏è',
      'family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      'extreme': 'ü§æ‚Äç‚ôÇÔ∏è',

      // –õ–æ–∫–∞—Ü–∏–∏  
      'mountains': 'üèîÔ∏è',
      'canyons': 'üèúÔ∏è',
      'desert': 'üèúÔ∏è',
      'forest': 'üå≤',
      'lakes': 'üèûÔ∏è',
      'historical': 'üèõÔ∏è',
      'ancient': 'üóø',
      'urban': 'üèôÔ∏è',
      'village': 'üèòÔ∏è',
      'beach': 'üèñÔ∏è',
      'parks': 'üå≥',

      // –§–æ—Ä–º–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏
      'one-day': '‚òÄÔ∏è',
      'weekend': 'üìÖ',
      'long': 'üóìÔ∏è',
      'spontaneous-trip': '‚ö°',
      'morning-evening': 'üåÖ',
      'camping': '‚õ∫',
      'comfort': 'üè®',
      'bus-auto': 'üöå',
      'hiking': 'ü•æ'
    };
    return iconMap[iconKey] || 'üìç';
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
  const handleSubmit = async () => {
    setSubmitting(true);
    setError('');

    try {
      await apiClient.selectPreferences({
        preferred_travel_styles: selectedStyles,
        preferred_travel_locations: selectedLocations,
        preferred_trip_durations: selectedDurations,
      });

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      router.push('/');
    } catch (err: any) {
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π');
      setSubmitting(false);
    }
  };

  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥
  const handleSkip = async () => {
    setSubmitting(true);
    try {
      await apiClient.selectPreferences({
        preferred_travel_styles: [],
        preferred_travel_locations: [],
        preferred_trip_durations: [],
      });
      router.push('/');
    } catch (err: any) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —à–∞–≥–∞');
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-4 border-orange-600 border-t-transparent mx-auto mb-4"></div>
          <p className="text-xl font-semibold text-gray-800">–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <div className="bg-white border-b border-gray-100">
        <div className="max-w-4xl mx-auto px-6 py-6">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-orange-600 mb-4">üåø –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –±–ª–∏–∂–µ</h1>
            <div className="max-w-md mx-auto space-y-3">
              <p className="text-sm leading-relaxed text-gray-700">
                –ß—Ç–æ–±—ã Circle –±—ã–ª –¥–ª—è —Ç–µ–±—è –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–∫–æ–º —Ç—É—Ä–æ–≤, –∞ –º–µ—Å—Ç–æ–º –≤—Å—Ç—Ä–µ—á –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, 
                —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–∞–º –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–∏—Ö –≤–∫—É—Å–∞—Ö.
              </p>
              <p className="text-sm leading-relaxed text-gray-700">
                –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ç–æ, —á—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è.
              </p>
              <p className="text-sm leading-relaxed font-medium text-gray-900">
                –ê —Ç–µ–±–µ ‚Äî –Ω–µ–º–Ω–æ–≥–æ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Å–µ–±—è.
              </p>
            </div>
            <div className="flex items-center justify-center mt-4">
              <div className="flex items-center text-sm text-gray-600">
                <span className="font-medium">–®–∞–≥ 2 –∏–∑ 2</span>
                <div className="w-20 bg-gray-200 rounded-full h-1 ml-3">
                  <div className="bg-orange-600 rounded-full h-1 w-full transition-all duration-700"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-6 py-8">
        {error && (
          <div className="mb-6 bg-red-50 border border-red-200 rounded-2xl p-4">
            <p className="text-red-700 text-center font-medium">{error}</p>
          </div>
        )}

        <div className="space-y-8">
          {/* –°—Ç–∏–ª—å –æ—Ç–¥—ã—Ö–∞ */}
          <section className="bg-gray-50 rounded-3xl p-6 border border-gray-100">
            <div className="mb-6 text-center">
              <h2 className="text-xl font-bold text-orange-600 mb-2">–°—Ç–∏–ª—å –æ—Ç–¥—ã—Ö–∞</h2>
              <p className="text-gray-700 text-sm">–ö–∞–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è?</p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              {travelStyles.map((style) => (
                <button
                  key={style.id}
                  onClick={() => toggleStyle(style.id)}
                  className={`group relative p-4 rounded-xl border-2 transition-all duration-300 ${
                    selectedStyles.includes(style.id)
                      ? 'border-orange-500 bg-orange-50 shadow-md'
                      : 'border-gray-200 bg-white hover:bg-gray-50 hover:border-gray-300'
                  }`}
                >
                  <div className="text-center">
                    <div className="text-3xl mb-3">
                      {getIcon(style.icon)}
                    </div>
                    <h3 className="font-semibold text-orange-600 text-sm mb-2">{style.name}</h3>
                    <p className="text-xs text-gray-600 leading-tight">{style.description}</p>
                  </div>
                  
                  {selectedStyles.includes(style.id) && (
                    <div className="absolute -top-2 -right-2 bg-orange-500 text-white rounded-full w-7 h-7 flex items-center justify-center text-sm font-bold shadow-md">
                      ‚úì
                    </div>
                  )}
                </button>
              ))}
            </div>
          </section>

          {/* –õ–æ–∫–∞—Ü–∏–∏ */}
          <section className="bg-gray-50 rounded-3xl p-6 border border-gray-100">
            <div className="mb-6 text-center">
              <h2 className="text-xl font-bold text-orange-600 mb-2">–õ–æ–∫–∞—Ü–∏–∏</h2>
              <p className="text-gray-700 text-sm">–ö–∞–∫–∏–µ –º–µ—Å—Ç–∞ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?</p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              {travelLocations.map((location) => (
                <button
                  key={location.id}
                  onClick={() => toggleLocation(location.id)}
                  className={`group relative p-4 rounded-xl border-2 transition-all duration-300 ${
                    selectedLocations.includes(location.id)
                      ? 'border-orange-500 bg-orange-50 shadow-md'
                      : 'border-gray-200 bg-white hover:bg-gray-50 hover:border-gray-300'
                  }`}
                >
                  <div className="text-center">
                    <div className="text-3xl mb-3">
                      {getIcon(location.icon)}
                    </div>
                    <h3 className="font-semibold text-orange-600 text-sm mb-2">{location.name}</h3>
                    <p className="text-xs text-gray-600 leading-tight">{location.description}</p>
                  </div>
                  
                  {selectedLocations.includes(location.id) && (
                    <div className="absolute -top-2 -right-2 bg-orange-500 text-white rounded-full w-7 h-7 flex items-center justify-center text-sm font-bold shadow-md">
                      ‚úì
                    </div>
                  )}
                </button>
              ))}
            </div>
          </section>

          {/* –§–æ—Ä–º–∞—Ç –ø–æ–µ–∑–¥–∫–∏ */}
          <section className="bg-gray-50 rounded-3xl p-6 border border-gray-100">
            <div className="mb-6 text-center">
              <h2 className="text-xl font-bold text-orange-600 mb-2">–§–æ—Ä–º–∞—Ç –ø–æ–µ–∑–¥–∫–∏</h2>
              <p className="text-gray-700 text-sm">–ö–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å?</p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              {tripDurations.map((duration) => (
                <button
                  key={duration.id}
                  onClick={() => toggleDuration(duration.id)}
                  className={`group relative p-4 rounded-xl border-2 transition-all duration-300 ${
                    selectedDurations.includes(duration.id)
                      ? 'border-orange-500 bg-orange-50 shadow-md'
                      : 'border-gray-200 bg-white hover:bg-gray-50 hover:border-gray-300'
                  }`}
                >
                  <div className="text-center">
                    <div className="text-3xl mb-3">
                      {getIcon(duration.icon)}
                    </div>
                    <h3 className="font-semibold text-orange-600 text-sm mb-2">{duration.name}</h3>
                    <p className="text-xs text-gray-600 leading-tight">{duration.description}</p>
                  </div>
                  
                  {selectedDurations.includes(duration.id) && (
                    <div className="absolute -top-2 -right-2 bg-orange-500 text-white rounded-full w-7 h-7 flex items-center justify-center text-sm font-bold shadow-md">
                      ‚úì
                    </div>
                  )}
                </button>
              ))}
            </div>
          </section>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="mt-10 flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={handleSkip}
            disabled={submitting}
            className="px-8 py-4 border-2 border-gray-300 text-gray-700 bg-white rounded-2xl font-semibold transition-all duration-300 hover:bg-gray-50 hover:border-gray-400 disabled:opacity-50"
          >
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
          </button>
          
          <button
            onClick={handleSubmit}
            disabled={submitting}
            className="px-8 py-4 bg-orange-600 hover:bg-orange-700 text-white rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:hover:scale-100 shadow-lg"
          >
            {submitting ? (
              <div className="flex items-center gap-2">
                <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
                –°–æ—Ö—Ä–∞–Ω—è–µ–º...
              </div>
            ) : (
              <>
                {selectedStyles.length + selectedLocations.length + selectedDurations.length > 0 
                  ? `–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä (${selectedStyles.length + selectedLocations.length + selectedDurations.length})` 
                  : '–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É'
                }
              </>
            )}
          </button>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-8 text-center">
          <p className="text-gray-600 text-sm">
            –¢—ã —Å–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è
          </p>
        </div>
      </div>
    </div>
  );
} 