import { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { TelegramUtils } from '@/lib/telegram';
import { apiClient, tokenUtils, type User, type AuthResponse } from '@/lib/api';

interface TelegramAuthState {
  isLoading: boolean;
  isAuthenticated: boolean;
  user: User | null;
  error: string | null;
  isInTelegram: boolean;
}

interface TelegramAuthActions {
  login: () => Promise<void>;
  logout: () => Promise<void>;
  refresh: () => Promise<void>;
}

export function useTelegramAuth(): TelegramAuthState & TelegramAuthActions {
  const router = useRouter();
  const [state, setState] = useState<TelegramAuthState>({
    isLoading: true,
    isAuthenticated: false,
    user: null,
    error: null,
    isInTelegram: false,
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    checkAuthStatus();
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const isInTelegram = TelegramUtils.isInTelegram();
      setState(prev => ({ ...prev, isInTelegram }));

      if (isInTelegram) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebApp
        TelegramUtils.ready();
        TelegramUtils.setupTheme();
        
        // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∏ –µ—Å—Ç—å initData, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
        if (!tokenUtils.isAuthenticated() && TelegramUtils.getInitData()) {
          login();
        }
      }
    }
  }, []);

  const checkAuthStatus = useCallback(async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
      if (!tokenUtils.isAuthenticated()) {
        setState(prev => ({
          ...prev,
          isLoading: false,
          isAuthenticated: false,
          user: null
        }));
        return;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await apiClient.getMe();
      setState(prev => ({
        ...prev,
        isLoading: false,
        isAuthenticated: true,
        user,
        error: null
      }));

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      
      // –¢–æ–∫–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Ö
      tokenUtils.removeTokens();
      setState(prev => ({
        ...prev,
        isLoading: false,
        isAuthenticated: false,
        user: null,
        error: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'
      }));
    }
  }, []);

  const login = useCallback(async () => {
    try {
      setState(prev => ({ ...prev, isLoading: true, error: null }));

      // –ü–æ–ª—É—á–∞–µ–º initData –æ—Ç Telegram
      const initData = TelegramUtils.getInitData();
      
      console.log('üîç Telegram Debug Info:');
      console.log('- isInTelegram:', TelegramUtils.isInTelegram());
      console.log('- initData length:', initData?.length || 0);
      console.log('- initData:', initData ? initData.substring(0, 100) + '...' : 'empty');
      console.log('- WebApp available:', TelegramUtils.isAvailable());
      console.log('- User data:', TelegramUtils.getUser());
      
      if (!initData || initData.length < 10) {
        throw new Error('–î–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      const response: AuthResponse = await apiClient.telegramAuth(initData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      tokenUtils.setTokens(response.tokens);
      tokenUtils.setUser(response.user);

      setState(prev => ({
        ...prev,
        isLoading: false,
        isAuthenticated: true,
        user: response.user,
        error: null
      }));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      TelegramUtils.vibrate('success');

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ onboarding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (response.onboarding_required) {
        if (!response.user.sphere_selected) {
          router.push('/onboarding/sphere');
        } else if (!response.user.preferences_selected) {
          router.push('/onboarding/preferences');
        }
      }

      console.log('–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram:', response.user.username);

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      if (error.message?.includes('fetch')) {
        errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
      } else if (error.message?.includes('Load failed')) {
        errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.message?.includes('NetworkError')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      setState(prev => ({
        ...prev,
        isLoading: false,
        error: errorMessage
      }));

      // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram popup —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      TelegramUtils.vibrate('error');
    }
  }, [router]);

  const logout = useCallback(async () => {
    try {
      setState(prev => ({ ...prev, isLoading: true }));

      const tokens = tokenUtils.getTokens();
      if (tokens?.refresh) {
        try {
          await apiClient.logout(tokens.refresh);
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —á–µ—Ä–µ–∑ API:', error);
        }
      }

      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      tokenUtils.removeTokens();
      
      setState(prev => ({
        ...prev,
        isLoading: false,
        isAuthenticated: false,
        user: null,
        error: null
      }));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      TelegramUtils.vibrate('light');

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      router.push('/auth');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      setState(prev => ({ ...prev, isLoading: false }));
    }
  }, [router]);

  const refresh = useCallback(async () => {
    try {
      const tokens = tokenUtils.getTokens();
      if (!tokens?.refresh) {
        throw new Error('Refresh —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }

      const newTokens = await apiClient.refreshToken(tokens.refresh);
      tokenUtils.setTokens(newTokens);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await apiClient.getMe();
      tokenUtils.setUser(user);

      setState(prev => ({
        ...prev,
        user,
        isAuthenticated: true,
        error: null
      }));

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
      
      // –¢–æ–∫–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, –≤—ã—Ö–æ–¥–∏–º
      tokenUtils.removeTokens();
      setState(prev => ({
        ...prev,
        isAuthenticated: false,
        user: null,
        error: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'
      }));
      
      router.push('/auth');
    }
  }, [router]);

  return {
    ...state,
    login,
    logout,
    refresh
  };
} 