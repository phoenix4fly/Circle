import asyncio
import logging
import os
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://77c013525167.ngrok-free.app')  # URL –≤–∞—à–µ–≥–æ WebApp
BACKEND_API_URL = os.getenv('BACKEND_API_URL', 'http://127.0.0.1:8001/api/v1')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å Circle"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="tours", description="üó∫Ô∏è –ù–∞–π—Ç–∏ —Ç—É—Ä—ã"),
        BotCommand(command="communities", description="üí¨ –°–æ–æ–±—â–µ—Å—Ç–≤–∞"),
    ]
    await bot.set_my_commands(commands)


@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    user_name = user.first_name or "–¥—Ä—É–≥"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp –∫–Ω–æ–ø–∫–æ–π
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="üåç –û—Ç–∫—Ä—ã—Ç—å Circle",
        web_app=WebAppInfo(url=WEBAPP_URL)
    ))
    kb.add(InlineKeyboardButton(
        text="‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        callback_data="how_it_works"
    ))
    kb.add(InlineKeyboardButton(
        text="üîß –¢–µ—Å—Ç WebApp",
        web_app=WebAppInfo(url=f"{WEBAPP_URL}/telegram-test")
    ))
    kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    
    welcome_text = f"""
üåç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Circle!</b>

–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

Circle ‚Äî —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏:

‚ú® <b>–ù–∞—Ö–æ–¥–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤</b> –¥–ª—è –ª—é–±—ã—Ö –ø–æ–µ–∑–¥–æ–∫
üéØ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º</b> –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º  
üó∫Ô∏è <b>–û—Ç–∫—Ä—ã–≤–∞–π –Ω–æ–≤—ã–µ —Ç—É—Ä—ã</b> –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤
üí¨ <b>–û–±—â–∞–π—Å—è</b> —Å –¥—Ä—É–≥–∏–º–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏

<i>–ù–µ –≤–∞–∂–Ω–æ –∫—É–¥–∞. –í–∞–∂–Ω–æ ‚Äî —Å –∫–µ–º.</i>

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá
"""
    
    await message.answer(
        welcome_text,
        reply_markup=kb.as_markup()
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ Circle</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile ‚Äî –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/tours ‚Äî –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
/communities ‚Äî –ú–æ–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Circle?</b>

1Ô∏è‚É£ <b>–ù–∞–π–¥–∏ —Ç—É—Ä—ã</b> ‚Äî –≤—ã–±–∏—Ä–∞–π –∏–∑ —Å–æ—Ç–µ–Ω –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
2Ô∏è‚É£ <b>–°–º–æ—Ç—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b> ‚Äî –∫—Ç–æ –µ–¥–µ—Ç —Å —Ç–æ–±–æ–π
3Ô∏è‚É£ <b>–û–±—â–∞–π—Å—è –≤ —á–∞—Ç–∞—Ö</b> ‚Äî –∑–Ω–∞–∫–æ–º—å—Å—è –¥–æ –ø–æ–µ–∑–¥–∫–∏
4Ô∏è‚É£ <b>–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π</b> ‚Äî –ø–æ–ª—É—á–∞–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–ù–∞–ø–∏—à–∏ @circle_support –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /feedback
"""
    
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="üåç –û—Ç–∫—Ä—ã—Ç—å Circle",
        web_app=WebAppInfo(url=WEBAPP_URL)
    ))
    
    await message.answer(help_text, reply_markup=kb.as_markup())


@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        web_app=WebAppInfo(url=f"{WEBAPP_URL}/profile")
    ))
    
    await message.answer(
        "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n–û—Ç–∫—Ä–æ–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–µ–∑–¥–æ–∫.",
        reply_markup=kb.as_markup()
    )


@dp.message(Command("tours"))
async def cmd_tours(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tours"""
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="üó∫Ô∏è –ù–∞–π—Ç–∏ —Ç—É—Ä—ã",
        web_app=WebAppInfo(url=f"{WEBAPP_URL}/tours")
    ))
    
    await message.answer(
        "üó∫Ô∏è <b>–ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤</b>\n\n–û—Ç–∫—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥ —Ç—É—Ä–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ø—É—Ç—á–∏–∫–∞–º–∏!",
        reply_markup=kb.as_markup()
    )


@dp.message(Command("communities"))
async def cmd_communities(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /communities"""
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="üí¨ –ú–æ–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
        web_app=WebAppInfo(url=f"{WEBAPP_URL}/communities")
    ))
    
    await message.answer(
        "üí¨ <b>–°–æ–æ–±—â–µ—Å—Ç–≤–∞</b>\n\n–û–±—â–∞–π—Å—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏, –¥–µ–ª–∏—Å—å –æ–ø—ã—Ç–æ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–π —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏!",
        reply_markup=kb.as_markup()
    )


@dp.callback_query(lambda c: c.data == "how_it_works")
async def process_how_it_works(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?'"""
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
        
    how_it_works_text = """
üéØ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Circle?</b>

<b>1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b> üìù
–ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã

<b>2. –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤</b> üîç
–ù–∞—Ö–æ–¥–∏ —Ç—É—Ä—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º, –¥–∞—Ç–∞–º –∏ –±—é–¥–∂–µ—Ç—É

<b>3. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ</b> üë•
–°–º–æ—Ç—Ä–∏, –∫—Ç–æ –µ–¥–µ—Ç –≤ —Ç–æ—Ç –∂–µ —Ç—É—Ä, —á–∏—Ç–∞–π –ø—Ä–æ—Ñ–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

<b>4. –û–±—â–µ–Ω–∏–µ</b> üí¨
–û–±—â–∞–π—Å—è –≤ —á–∞—Ç–∞—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—É—Ä–æ–≤

<b>5. –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</b> ‚úàÔ∏è
–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π —Å –Ω–æ–≤—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏!

<b>–ü–æ—á–µ–º—É Circle?</b>
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
‚Ä¢ –ï–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ ‚Äî —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å ‚Äî –≤–∏–¥–∏—à—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –£–¥–æ–±—Å—Ç–≤–æ ‚Äî –≤—Å—ë –≤ –æ–¥–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
"""
    
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="üöÄ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å",
        web_app=WebAppInfo(url=WEBAPP_URL)
    ))
    kb.add(InlineKeyboardButton(
        text="¬´ –ù–∞–∑–∞–¥",
        callback_data="back_to_start"
    ))
    kb.adjust(1)
    
    await callback_query.message.edit_text(
        how_it_works_text,
        reply_markup=kb.as_markup()
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "back_to_start")
async def process_back_to_start(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
        
    user = callback_query.from_user
    if not user:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
        
    user_name = user.first_name or "–¥—Ä—É–≥"
    
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="üåç –û—Ç–∫—Ä—ã—Ç—å Circle",
        web_app=WebAppInfo(url=WEBAPP_URL)
    ))
    kb.add(InlineKeyboardButton(
        text="‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        callback_data="how_it_works"
    ))
    kb.adjust(1)
    
    welcome_text = f"""
üåç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Circle!</b>

–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

Circle ‚Äî —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏:

‚ú® <b>–ù–∞—Ö–æ–¥–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤</b> –¥–ª—è –ª—é–±—ã—Ö –ø–æ–µ–∑–¥–æ–∫
üéØ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º</b> –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º  
üó∫Ô∏è <b>–û—Ç–∫—Ä—ã–≤–∞–π –Ω–æ–≤—ã–µ —Ç—É—Ä—ã</b> –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤
üí¨ <b>–û–±—â–∞–π—Å—è</b> —Å –¥—Ä—É–≥–∏–º–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏

<i>–ù–µ –≤–∞–∂–Ω–æ –∫—É–¥–∞. –í–∞–∂–Ω–æ ‚Äî —Å –∫–µ–º.</i>

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá
"""
    
    await callback_query.message.edit_text(
        welcome_text,
        reply_markup=kb.as_markup()
    )
    await callback_query.answer()


@dp.message()
async def handle_any_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="üåç –û—Ç–∫—Ä—ã—Ç—å Circle",
        web_app=WebAppInfo(url=WEBAPP_URL)
    ))
    
    await message.answer(
        "üëã –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π Circle –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!",
        reply_markup=kb.as_markup()
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await set_bot_commands()
        
        logger.info("ü§ñ Circle Bot –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"üì± WebApp URL: {WEBAPP_URL}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main()) 