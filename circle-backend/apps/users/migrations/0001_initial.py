# Generated by Django 4.2.23 on 2025-07-16 12:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sphere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='TravelLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Название иконки', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Travel Location',
                'verbose_name_plural': 'Travel Locations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TravelStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Название иконки', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Travel Style',
                'verbose_name_plural': 'Travel Styles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TripDuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Название иконки', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Trip Duration',
                'verbose_name_plural': 'Trip Durations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sphere', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specializations', to='users.sphere')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, help_text='Фото профиля. Может быть загружено из Telegram или самим пользователем.', null=True, upload_to='avatars/')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужчина'), ('F', 'Женщина'), ('O', 'Предпочитаю не указывать')], help_text='Пол пользователя для персонализации контента и аналитики', max_length=1, null=True)),
                ('bio', models.TextField(blank=True, help_text='Биография или информация о себе.')),
                ('interests', models.TextField(blank=True, help_text='Интересы и хобби.')),
                ('phone_number', models.CharField(blank=True, help_text='Номер телефона для связи (запрашивается в WebApp)', max_length=20, null=True)),
                ('telegram_id', models.BigIntegerField(blank=True, help_text='Уникальный Telegram ID для отправки сообщений через бот.', null=True, unique=True)),
                ('last_online', models.DateTimeField(blank=True, help_text='Время последней активности пользователя', null=True)),
                ('onboarding_completed', models.BooleanField(default=False, help_text='Завершен ли процесс первичной настройки профиля')),
                ('sphere_selected', models.BooleanField(default=False, help_text='Выбрана ли сфера деятельности')),
                ('preferences_selected', models.BooleanField(default=False, help_text='Выбраны ли предпочтения путешествий')),
                ('connections', models.ManyToManyField(blank=True, help_text='Пользователи, с которыми этот пользователь связан (через совместные поездки)', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('preferred_travel_locations', models.ManyToManyField(blank=True, help_text='Предпочитаемые локации', related_name='users', to='users.travellocation')),
                ('preferred_travel_styles', models.ManyToManyField(blank=True, help_text='Предпочитаемые стили отдыха', related_name='users', to='users.travelstyle')),
                ('preferred_trip_durations', models.ManyToManyField(blank=True, help_text='Предпочитаемые форматы поездок', related_name='users', to='users.tripduration')),
                ('specialization', models.ForeignKey(blank=True, help_text='Специализация внутри сферы.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.specialization')),
                ('sphere', models.ForeignKey(blank=True, help_text='Основная сфера деятельности пользователя.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.sphere')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
