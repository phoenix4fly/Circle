# Generated by Django 4.2.23 on 2025-07-16 12:19

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('media', '0001_initial'),
        ('agencies', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('discount_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('usage_limit', models.PositiveIntegerField(default=1)),
                ('used_count', models.PositiveIntegerField(default=0)),
                ('min_purchase_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Минимальная сумма покупки для применения промокода', max_digits=10, null=True)),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Promo Code',
                'verbose_name_plural': 'Promo Codes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('discount_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Promotion',
                'verbose_name_plural': 'Promotions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название тура', max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(help_text='Подробное описание маршрута')),
                ('price_from', models.DecimalField(decimal_places=2, help_text='Минимальная цена на карточке', max_digits=10)),
                ('base_price', models.DecimalField(decimal_places=2, help_text='Базовая цена без опций', max_digits=10)),
                ('distance_from_tashkent_km', models.FloatField(blank=True, help_text='Расстояние от Ташкента (в км)', null=True)),
                ('duration_days', models.PositiveIntegerField(help_text='Количество дней')),
                ('duration_nights', models.PositiveIntegerField(help_text='Количество ночей')),
                ('transport_options', models.JSONField(blank=True, default=dict, help_text='Варианты транспорта и цены. Пример: {"bus": 100000, "car": 150000}')),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='tour_main_images/')),
                ('is_active', models.BooleanField(default=True)),
                ('season_start', models.DateField(blank=True, help_text='Начало сезона (необязательно)', null=True)),
                ('season_end', models.DateField(blank=True, help_text='Конец сезона (необязательно)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agency', models.ForeignKey(help_text='Турагентство, которое создало тур', on_delete=django.db.models.deletion.CASCADE, related_name='tours', to='agencies.travelagency')),
                ('gallery', models.ManyToManyField(blank=True, help_text='Дополнительные фото тура', related_name='tours', to='media.media')),
            ],
            options={
                'verbose_name': 'Tour',
                'verbose_name_plural': 'Tours',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TourCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Tour Category',
                'verbose_name_plural': 'Tour Categories',
            },
        ),
        migrations.CreateModel(
            name='TourParameterDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название параметра', max_length=100)),
                ('unit', models.CharField(blank=True, help_text='Единица измерения (например: км, м)', max_length=50)),
                ('data_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('enum', 'Enum')], max_length=20)),
                ('required', models.BooleanField(default=False, help_text='Обязателен ли параметр для заполнения')),
                ('options', models.JSONField(blank=True, help_text='Список опций для Enum. Пример: ["Easy", "Medium", "Hard"]', null=True)),
                ('tour_type', models.ForeignKey(help_text='К какой категории относится параметр', on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='tours.tourcategory')),
            ],
            options={
                'verbose_name': 'Tour Parameter Definition',
                'verbose_name_plural': 'Tour Parameter Definitions',
            },
        ),
        migrations.CreateModel(
            name='TourSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_start', models.DateField(help_text='Дата начала поездки')),
                ('date_end', models.DateField(blank=True, help_text='Дата окончания (если многодневный тур)', null=True)),
                ('capacity', models.PositiveIntegerField(help_text='Максимальное количество мест')),
                ('available_seats', models.PositiveIntegerField(help_text='Оставшиеся доступные места')),
                ('is_active', models.BooleanField(default=True, help_text='Отображать эту дату на витрине')),
                ('price_override', models.DecimalField(blank=True, decimal_places=2, help_text='Специальная цена для этой даты (если отличается)', max_digits=10, null=True)),
                ('tour', models.ForeignKey(help_text='Маршрут, к которому относится эта дата', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='tours.tour')),
            ],
            options={
                'verbose_name': 'Tour Session',
                'verbose_name_plural': 'Tour Sessions',
                'ordering': ['date_start'],
            },
        ),
        migrations.CreateModel(
            name='TourSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_number', models.PositiveIntegerField(help_text='Номер дня в программе')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='tour_schedule_images/')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='tours.tour')),
            ],
            options={
                'verbose_name': 'Tour Schedule',
                'verbose_name_plural': 'Tour Schedules',
                'ordering': ['tour', 'day_number'],
            },
        ),
        migrations.CreateModel(
            name='TourParameterValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(help_text='Значение параметра (хранится как текст)')),
                ('parameter_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tours.tourparameterdefinition')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameter_values', to='tours.tour')),
            ],
            options={
                'verbose_name': 'Tour Parameter Value',
                'verbose_name_plural': 'Tour Parameter Values',
            },
        ),
        migrations.CreateModel(
            name='TourChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_restricted', models.BooleanField(default=True, help_text='Если True, писать могут только участники тура')),
                ('tour', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chat', to='tours.tour')),
            ],
            options={
                'verbose_name': 'Tour Chat',
                'verbose_name_plural': 'Tour Chats',
            },
        ),
    ]
