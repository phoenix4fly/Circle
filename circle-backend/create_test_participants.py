#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–æ–≤
"""

import os
import django
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'circle.settings')
django.setup()

from apps.users.models import User, Sphere, Specialization
from apps.tours.models import Tour, TourSession
from apps.bookings.models import Booking

def create_test_participants():
    print("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä—ã
    sphere_data = [
        ('IT', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'),
        ('–ë–∏–∑–Ω–µ—Å', '–ë–∏–∑–Ω–µ—Å –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ'), 
        ('–ú–µ–¥–∏—Ü–∏–Ω–∞', '–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ'),
        ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—É–∫–∞'),
        ('–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ')
    ]
    
    spheres = {}
    for name, desc in sphere_data:
        sphere, created = Sphere.objects.get_or_create(name=name, defaults={'description': desc})
        spheres[name] = sphere
        if created:
            print(f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ñ–µ—Ä–∞: {sphere.name}')
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    spec_data = [
        ('Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'IT'),
        ('Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'IT'),
        ('DevOps –∏–Ω–∂–µ–Ω–µ—Ä', 'IT'),
        ('–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–ë–∏–∑–Ω–µ—Å'),
        ('–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤', '–ë–∏–∑–Ω–µ—Å'),
        ('–í—Ä–∞—á', '–ú–µ–¥–∏—Ü–∏–Ω–∞'),
        ('–î–∏–∑–∞–π–Ω–µ—Ä', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'),
        ('–£—á–∏—Ç–µ–ª—å', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')
    ]
    
    specializations = {}
    for spec_name, sphere_name in spec_data:
        sphere = spheres[sphere_name]
        spec, created = Specialization.objects.get_or_create(
            name=spec_name,
            sphere=sphere,
            defaults={'description': f'–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ {spec_name}'}
        )
        specializations[spec_name] = spec
        if created:
            print(f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec.name}')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [
        ('–ê–ª–∏—Å–∞', '–ò–≤–∞–Ω–æ–≤–∞', 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'),
        ('–î–º–∏—Ç—Ä–∏–π', '–ü–µ—Ç—Ä–æ–≤', 'Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'),
        ('–ú–∞—Ä–∏—è', '–°–∏–¥–æ—Ä–æ–≤–∞', '–î–∏–∑–∞–π–Ω–µ—Ä'),
        ('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ö–æ–∑–ª–æ–≤', '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥'),
        ('–ï–ª–µ–Ω–∞', '–§–µ–¥–æ—Ä–æ–≤–∞', '–í—Ä–∞—á'),
        ('–°–µ—Ä–≥–µ–π', '–ú–æ—Ä–æ–∑–æ–≤', 'DevOps –∏–Ω–∂–µ–Ω–µ—Ä'),
        ('–ê–Ω–Ω–∞', '–õ–µ–±–µ–¥–µ–≤–∞', '–£—á–∏—Ç–µ–ª—å'),
        ('–ú–∞–∫—Å–∏–º', '–í–æ–ª–∫–æ–≤', '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤'),
        ('–û–ª—å–≥–∞', '–ù–æ–≤–∏–∫–æ–≤–∞', '–î–∏–∑–∞–π–Ω–µ—Ä'),
        ('–ê–Ω–¥—Ä–µ–π', '–°–æ–∫–æ–ª–æ–≤', 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')
    ]
    
    users_created = []
    for first_name, last_name, spec_name in test_users:
        username = f"{first_name.lower()}.{last_name.lower()}"
        email = f"{username}@example.com"
        
        user, created = User.objects.get_or_create(
            username=username,
            defaults={
                'first_name': first_name,
                'last_name': last_name,
                'email': email,
                'phone_number': f'+998901{random.randint(100000, 999999)}',
                'sphere': specializations[spec_name].sphere,
                'specialization': specializations[spec_name]
            }
        )
        users_created.append(user)
        if created:
            print(f'‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name} ({spec_name})')
    
    # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç—É—Ä–æ–≤
    tours = Tour.objects.all()
    for tour in tours:
        sessions = tour.sessions.all()
        if sessions:
            session = sessions.first()
            
            # –î–æ–±–∞–≤–ª—è–µ–º 2-4 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –∫–∞–∂–¥–æ–º—É —Ç—É—Ä—É
            participants_count = random.randint(2, min(4, len(users_created)))
            selected_users = random.sample(users_created, participants_count)
            
            for user in selected_users:
                booking, created = Booking.objects.get_or_create(
                    user=user,
                    tour=tour,
                    session=session,
                    defaults={
                        'status': 'confirmed',
                        'participants_count': 1,
                        'total_price': session.price
                    }
                )
                if created:
                    print(f'üìù –°–æ–∑–¥–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {user.first_name} ‚Üí {tour.title}')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
                    session.current_participants += 1
                    session.save()
    
    print(f"üéâ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_created)}")
    print(f"üìä –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {Booking.objects.count()}")
    print(f"üìä –¢—É—Ä–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: {Tour.objects.filter(bookings__isnull=False).distinct().count()}")

if __name__ == '__main__':
    create_test_participants() 